name: build_test_deploy
run-name: Build, test and deploy website (if needed)
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0
#      - name: Install ruby
#        uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: '3.0' 
#          bundler-cache: true
#      - name: Install python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.7'
#      - name: install prerequisites
#        run:  pip3 install html5validator requests && gem install --no-document html-proofer
#      - name: Update external content
#        run:  ./update.sh
#      - name: Clean up stubs
#        run:  rm -rf _cases/3000 _cves/CVE-3000-*
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get yarn cache dir
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: yarn cache
        uses: actions/cache@v1
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Next cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}
      - name: Yarn
        run:  yarn 
      - name: Build
        run:  yarn build
      - name: "Fix security.txt"
        run: mkdir out/.well-known && (cd out/.well-known && ln -s ../security.txt) && ls -al out/.well-known
      - name: ".htaccess"
        run: cp .htaccess out/
#      - name: Test HTML code
#        run:  ./proof_html.sh
      - name: rsync deploy
        uses: burnett01/rsync-deployments@5.2.1
        if:   ${{ github.ref == 'refs/heads/main' }}
        with:
          switches: -avzr --delete
          path: out/
          remote_path: htdocs/beta
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
      - name: Deploy GiutHub pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: out/admin # The folder the action should deploy.      
